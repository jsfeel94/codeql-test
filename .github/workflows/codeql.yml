name: "CodeQL Analysis"

on:
  # PR에서 CodeQL 실행
  pull_request:
    branches: [ "main", "develop" ]
  # main 브랜치 푸시 시에도 실행 (Security 탭 업데이트용)
  push:
    branches: [ "main" ]
  # 스케줄 실행 (정기 보안 검사)
  schedule:
    - cron: '0 2 * * 1'  # 매주 월요일 오전 2시에 실행

# 중복 실행 방지를 위한 설정
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      # CodeQL이 필요한 권한
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        # CodeQL이 지원하는 언어 목록
        language: [ 'java' ]
        # 다른 언어를 추가하려면 여기에 추가
        # language: [ 'java', 'javascript', 'python', 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # CodeQL 쿼리 설정 옵션들:
        # queries: security-and-quality  # 기본: 보안 + 품질 쿼리
        # queries: security-extended     # 확장: 더 많은 보안 쿼리 (가양성 가능)
        # queries: default               # 기본: 정확도 높은 쿼리만
        # queries: security              # 보안: 보안 관련 쿼리만
        # queries: quality               # 품질: 코드 품질 쿼리만
        queries: security-and-quality
        
        # 사용자 정의 쿼리 설정 예시:
        # queries: |
        #   - name: security-and-quality
        #   - uses: security-extended
        #   - name: custom-queries
        #     uses: ./.github/codeql-queries

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        mvn clean compile -DskipTests

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # 추가적인 보안 스캔 작업
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      security-events: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run SpotBugs Security Analysis
      run: |
        mvn spotbugs:check -Dspotbugs.failOnError=false
      continue-on-error: true

    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check -DfailOnError=false
      continue-on-error: true

    - name: Comment PR with Security Results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // CodeQL 결과 요약
          const codeqlSummary = `
          ## 🔍 CodeQL Security Analysis Results
          
          CodeQL 분석이 완료되었습니다. 자세한 결과는 Security 탭에서 확인할 수 있습니다.
          
          ### 분석된 언어
          - Java
          
          ### 주요 보안 취약점 유형
          - SQL Injection
          - Command Injection  
          - Path Traversal
          - XSS (Cross-Site Scripting)
          - Weak Cryptography
          - Hardcoded Secrets
          - Unsafe Deserialization
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: codeqlSummary
          });
